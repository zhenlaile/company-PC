GIT 使用记录：


GIT  网络教程：
	http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000


新安装后的配置：
	 git config --global user.name "Your Name"
	 git config --global user.email "email@example.com"
	 
				-----------------   因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
									你也许会担心，如果有人故意冒充别人怎么办？
									这个不必担心，首先我们相信大家都是善良无知的群众，
									其次，真的有冒充的也是有办法可查的。

				注意git config命令的--global参数，用了这个参数，
				表示你这台机器上所有的Git仓库都会使用这个配置，
				当然也可以对某个仓库指定不同的用户名和Email地址。
				
				
				
创建本地版本库:
	mkdir 目录
	cd 目录
	git init 
	
				-----------------   瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），
									细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，
									没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

									如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
	
	

提交文件:
	 git add readme.txt   --添加文件到仓库
	 git commet -m "this is a message" --提交文件到仓库
	 
	 
	 

查看版本库的状态:
	 git status      --查看版本库中文件的状态
	 git diff 		 --查看详细修改内容
	 git diff HEAD -- readme.txt			--用于查看工作区和版本库中的相应文档的区别
	 git log --pretty=oneline	 --查看版本库中日志   后面参数为简单显示
	 
	 

回滚到指定版本号
	 git reset --hard HEAD^    --回滚到上一个版本   HEAD 代表当前版本  HEAD^^ 代表当前版本的上一个版本的上一个版本
								首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
								还可以直接吧HEAD^替换成版本号id的前7位
								
	 git reflog 			   --用来记录每一次命令    比较方便
	 
	 git checkout -- readme.txt    --丢弃工作区的修改   
	 
	 使用 git checkout 的场景:
				场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

				场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

				场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
				
				
				
				
				
				
删除文件

	 git checkout  -- test.txt      --其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	 
	 git rm test.txt     --删除单个文件
	 
	 
	 
	 
	 
	 
	 
远程仓库的建立和关联:

	 在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：

			第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：	
			ssh-keygen -t rsa -C "youremail@example.com"
			
			
			你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

			如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

			
			
			第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key：
	
		
		
			